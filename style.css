* {
    box-sizing: border-box;
    padding: 0;
    margin: 0;
}

body {
    font-family: 'Open Sans', sans-serif;
    font-size: 16px;
    line-height: 1.5;
    color: #333;
    background: #f5f5f5;
}

/*------------------------------- 
    grid container properties
 --------------------------------*/


/* grid-template-columns: 100px 200px;
there will be two columns. first column items
    will be 100px wide and second columns items 
    will be 200px wide.

grid-template-columns: 30% 40% 30%;
we can also declare columns like this

grid-template-columns: 1fr 1fr 2fr;
we can declare column by fraction. This will devide the items
 inside the column and the column width depending on the container width

 grid-template-columns: repeat(3, 1fr);
we can use repeat function for declaring same width items
grid-template-columns: repeat(3, 1fr) 3fr;
it means we have 3 columns of 1 fraction and one columns of 3 fraction 

grid-template-rows: repeat(3, 1fr)
it works to the row.this is rarely used.
*/

/* column-gap: 10px;
    it will apply gap between column(y axis)
    row-gap: 10px;
    it will apply gap between row(x axis)

    gap: 10px;
    we can also write like this which will apply column and row gap at the same time.
     */


/* If we write anything inside a item then the height of the item
     might expand to fit the content. The height of the other items of the same
     row will also expand. to fix it we can write,

     grid-auto-rows: 200px;
     but it will cut down the item's elements and will be applied to all the items.

    grid-auto-rows: minmax(100px, auto);
    this will set minimum heigth to 100px and maximum height to auto.
     */


/* If any item has element inside it then the item and the other items
      in the same row will get stretch whether the other items are empty or not.
      Then we can apply align-items to the empty items of the same row. If we apply
        grid-auto-row then align-items will be applied to all the items of the container.

         align-items: center;
    align-items: end;
        
     */



/* 
        justify-content: center;
    justify-content: end;

    these work same as the flex. It will applied to the whole container.

     */





.container {

    max-width: 960px;
    /* giving width to the grid container */
    border: 1px solid red;
    /* to show the width of the container */
    margin: 100px auto;
    padding: 10px;
    display: grid;
    /* grid-template-columns: repeat(3, 1fr); */
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    /* We can use this if we dont want to use media query to make the 
    layout responsive. The container will be auto filled by its items.
    */
    gap: 10px;




}


/*----------------------------- 
        grid item properties
-------------------------------- */

/* 

.item:nth-of-type(2) {
    height: 100px;
    width: 100px;
    align-self: center;
    justify-self: center;
}

It is applied to the item of the container. to make center to 
y axis we applied align-self, and for x axis we applied justify self.

*/


/* 
.item:nth-of-type(1) {
    background-color: #000;
    grid-column: 1/3;
}

It will select from the start of column 1 to start of column 3 through x axis

.item:nth-of-type(3) {
    background-color: #333;
    grid-row: 2/4;
}

It will select from the start of row 2 to start of row 4 through y axis
*/

.item {
    background: steelblue;
    color: white;
    font-size: 20px;
    padding: 20px;
    border: skyblue 1px solid;
}


/* .item:nth-of-type(1) {
    background-color: #000;
    grid-column: 1/3;
}

.item:nth-of-type(3) {
    background-color: #333;
    grid-row: 2/4;
}

.item:nth-of-type(4) {
    background-color: #333;
    grid-row: 2/4;
} */

@media (max-width: 500px) {
    .container {
        grid-template-columns: 1fr;
    }
}

/* will make the layout responsive */